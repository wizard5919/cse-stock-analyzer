name: Deploy to Production

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Push Docker Images
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    permissions:
      contents: read
      packages: write
      
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract backend metadata
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Extract frontend metadata
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: staging
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
        
    - name: Deploy to staging
      run: |
        # Update deployment with new images
        kubectl set image deployment/cse-backend-staging backend=${{ needs.build-and-push.outputs.backend-image }}
        kubectl set image deployment/cse-frontend-staging frontend=${{ needs.build-and-push.outputs.frontend-image }}
        
        # Wait for rollout to complete
        kubectl rollout status deployment/cse-backend-staging --timeout=300s
        kubectl rollout status deployment/cse-frontend-staging --timeout=300s
        
    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        sleep 30
        
        # Test staging endpoints
        STAGING_URL="${{ secrets.STAGING_URL }}"
        curl -f "${STAGING_URL}/api/health" || exit 1
        curl -f "${STAGING_URL}/api/stocks" || exit 1
        
        echo "‚úÖ Staging deployment successful!"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    environment: production
    if: github.ref == 'refs/heads/main' && (needs.deploy-staging.result == 'success' || github.event.inputs.environment == 'production')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        
    - name: Deploy to production
      run: |
        # Create backup of current deployment
        kubectl get deployment cse-backend-production -o yaml > backup-backend.yaml
        kubectl get deployment cse-frontend-production -o yaml > backup-frontend.yaml
        
        # Update deployment with new images
        kubectl set image deployment/cse-backend-production backend=${{ needs.build-and-push.outputs.backend-image }}
        kubectl set image deployment/cse-frontend-production frontend=${{ needs.build-and-push.outputs.frontend-image }}
        
        # Wait for rollout to complete
        kubectl rollout status deployment/cse-backend-production --timeout=600s
        kubectl rollout status deployment/cse-frontend-production --timeout=600s
        
    - name: Run production smoke tests
      run: |
        # Wait for services to be ready
        sleep 60
        
        # Test production endpoints
        PRODUCTION_URL="${{ secrets.PRODUCTION_URL }}"
        curl -f "${PRODUCTION_URL}/api/health" || exit 1
        curl -f "${PRODUCTION_URL}/api/stocks" || exit 1
        curl -f "${PRODUCTION_URL}/" || exit 1
        
        echo "‚úÖ Production deployment successful!"
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "üöÄ CSE Stock Analyzer v${{ github.run_number }} deployed to production successfully!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
  # Rollback on failure
  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure()
    environment: production
    
    steps:
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        
    - name: Rollback deployment
      run: |
        echo "üîÑ Rolling back production deployment..."
        kubectl rollout undo deployment/cse-backend-production
        kubectl rollout undo deployment/cse-frontend-production
        
        # Wait for rollback to complete
        kubectl rollout status deployment/cse-backend-production --timeout=300s
        kubectl rollout status deployment/cse-frontend-production --timeout=300s
        
        echo "‚úÖ Rollback completed!"
        
    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "‚ö†Ô∏è CSE Stock Analyzer deployment failed and was rolled back!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
